<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>安装brew时卡在Downloading Command Line Tools for Xcode</title>
    <link href="/2022/05/31/%E5%AE%89%E8%A3%85brew%E6%97%B6%E5%8D%A1%E5%9C%A8Downloading-Command-Line-Tools-for-Xcode/"/>
    <url>/2022/05/31/%E5%AE%89%E8%A3%85brew%E6%97%B6%E5%8D%A1%E5%9C%A8Downloading-Command-Line-Tools-for-Xcode/</url>
    
    <content type="html"><![CDATA[<p>Press RETURN/ENTER to continue or any other key to abort:<br>==&gt; /usr/bin/sudo /usr/sbin/chown -R kingsley:admin /usr/local/Homebrew<br>==&gt; Searching online for the Command Line Tools<br>==&gt; /usr/bin/sudo /usr/bin/touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress</p><p>卡在这一步骤时，可以去<a href="https://developer.apple.com/download/more/%E4%B8%8A%E7%99%BB%E9%99%86%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%EF%BC%88Xcode-11.4.1%EF%BC%89%E7%9A%84Command">https://developer.apple.com/download/more/上登陆，下载对应版本（Xcode-11.4.1）的Command</a> Line Tools ，然后手动安装</p>]]></content>
    
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac相关软件配置</title>
    <link href="/2022/05/31/mac%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/31/mac%E7%9B%B8%E5%85%B3%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>每次使用新的mac电脑，都需要安装和配置一大堆东西，那就都记录在这里吧，方便查看。</p><h3 id="U盘启动盘制作"><a href="#U盘启动盘制作" class="headerlink" title="U盘启动盘制作"></a>U盘启动盘制作</h3><p>电脑升级了最新的系统之后感觉有点卡，于是打算降级到Catalina。<br>官方是不支持降级的，那只能刷机了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /Volumes/Install\ macOS\ Catalina/Install\ macOS\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/macos<br></code></pre></td></tr></table></figure><h3 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h3><p>iTerm2 的安装，直接在官网下载安装。</p><p>官网地址： <a href="http://iterm2.com/downloads.html">http://iterm2.com/downloads.html</a><br>其实自带终端也挺好的，用iterm2的原因是：<br>最初看见了这个视频<br><a href="https://www.bilibili.com/video/BV1cf4y157sv?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1cf4y157sv?spm_id_from=333.337.search-card.all.click</a></p><h3 id="配置-vim高亮显示"><a href="#配置-vim高亮显示" class="headerlink" title="配置 vim高亮显示"></a>配置 vim高亮显示</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> ~/.vimrc<br>//增加一行  <span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span><br></code></pre></td></tr></table></figure><h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><ul><li>linux alias 是命令的一种别称，输入<br>alias<br>可以看到像下面这样的结果：<br>alias vi=”vim”<br>也即，输入vi后，被自动定向到vim这个命令了。alias的作用就是，可以简写命令。</li><li>一些插件<ul><li>zsh-syntax-highlighting shell 命令可以高亮显示，便捷的知道你输入的命令是否正确。</li><li>zsh-autosuggestions 命令行自动补全插件</li></ul></li></ul><h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;<br></code></pre></td></tr></table></figure><h4 id="替换brew-git"><a href="#替换brew-git" class="headerlink" title="替换brew.git"></a>替换brew.git</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git<br></code></pre></td></tr></table></figure><h4 id="替换homebrew-core-git"><a href="#替换homebrew-core-git" class="headerlink" title="替换homebrew-core.git"></a>替换homebrew-core.git</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;<br>git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git<br></code></pre></td></tr></table></figure><h4 id="刷新源"><a href="#刷新源" class="headerlink" title="刷新源"></a>刷新源</h4><p>brew update</p><h4 id="查看源"><a href="#查看源" class="headerlink" title="查看源"></a>查看源</h4><p>brew config</p><h3 id="GitHub-添加-SSHkey"><a href="#GitHub-添加-SSHkey" class="headerlink" title="GitHub 添加 SSHkey"></a>GitHub 添加 SSHkey</h3><p>git config –global user.name “用户名”<br>git config –global user.email “邮箱”<br>ssh-keygen -t rsa -C “邮箱”<br>cat /Users/xxxx/.ssh/id_rsa.pub<br>添加到github<br>详情可以参考<a href="https://www.jianshu.com/p/1bb662f8b8d3">https://www.jianshu.com/p/1bb662f8b8d3</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Navicat查看密码方案</title>
    <link href="/2022/05/23/post6/"/>
    <url>/2022/05/23/post6/</url>
    
    <content type="html"><![CDATA[<p>有时候会忘记数据库的密码，但是Navicat有保存着，那么怎么拿到呢？<br>1.导出连接<br><img src="/2022/05/23/post6/2022-05-23-21-32-55.png"><br>2、选择需要导出的连接<br><img src="/2022/05/23/post6/2022-05-23-21-33-19.png"><br>3、拿到保存到本地的connections.ncx文件中的Password<br>4、登陆在先php运行环境<a href="https://tool.lu/coderunner">https://tool.lu/coderunner</a><br>粘贴下方的代码到在线php运行环境，使用文件的Password替换代码中的“复制出来的密码”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NavicatPassword</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$version</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$aesKey</span> = <span class="hljs-string">&#x27;libcckeylibcckey&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$aesIv</span> = <span class="hljs-string">&#x27;libcciv libcciv &#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$blowString</span> = <span class="hljs-string">&#x27;3DC5CA39&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$blowKey</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$blowIv</span> = <span class="hljs-literal">null</span>;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$version</span> = <span class="hljs-number">12</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;version = <span class="hljs-variable">$version</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blowKey = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-string">&#x27;3DC5CA39&#x27;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;blowIv = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-string">&#x27;d9c7c3c8870d64bd&#x27;</span>);<br>    &#125;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">$this</span>-&gt;version) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">encryptEleven</span>(<span class="hljs-variable">$string</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">encryptTwelve</span>(<span class="hljs-variable">$string</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>         <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encryptEleven</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$round</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">floor</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>) / <span class="hljs-number">8</span>));<br>        <span class="hljs-variable">$leftLength</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>) % <span class="hljs-number">8</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;blowIv;<br>         <br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$round</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$temp</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">encryptBlock</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$string</span>, <span class="hljs-number">8</span> * <span class="hljs-variable">$i</span>, <span class="hljs-number">8</span>), <span class="hljs-variable">$currentVector</span>));<br>            <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-variable">$currentVector</span>, <span class="hljs-variable">$temp</span>);<br>            <span class="hljs-variable">$result</span> .= <span class="hljs-variable">$temp</span>;<br>        &#125;<br>         <br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$leftLength</span>) &#123;<br>            <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">encryptBlock</span>(<span class="hljs-variable">$currentVector</span>);<br>            <span class="hljs-variable">$result</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$string</span>, <span class="hljs-number">8</span> * <span class="hljs-variable">$i</span>, <span class="hljs-variable">$leftLength</span>), <span class="hljs-variable">$currentVector</span>);<br>        &#125;<br>         <br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$result</span>));<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encryptBlock</span>(<span class="hljs-params"><span class="hljs-variable">$block</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">openssl_encrypt</span>(<span class="hljs-variable">$block</span>, <span class="hljs-string">&#x27;BF-ECB&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decryptBlock</span>(<span class="hljs-params"><span class="hljs-variable">$block</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$block</span>, <span class="hljs-string">&#x27;BF-ECB&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xorBytes</span>(<span class="hljs-params"><span class="hljs-variable">$str1</span>, <span class="hljs-variable">$str2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str1</span>); <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$result</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str1</span>[<span class="hljs-variable">$i</span>]) ^ <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str2</span>[<span class="hljs-variable">$i</span>]));<br>        &#125;<br>         <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encryptTwelve</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">openssl_encrypt</span>(<span class="hljs-variable">$string</span>, <span class="hljs-string">&#x27;AES-128-CBC&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="hljs-variable">$this</span>-&gt;aesIv);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$result</span>));<br>    &#125;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decrypt</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">$this</span>-&gt;version) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">decryptEleven</span>(<span class="hljs-variable">$string</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">decryptTwelve</span>(<span class="hljs-variable">$string</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>         <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decryptEleven</span>(<span class="hljs-params"><span class="hljs-variable">$upperString</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$upperString</span>));<br>         <br>        <span class="hljs-variable">$round</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">floor</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>) / <span class="hljs-number">8</span>));<br>        <span class="hljs-variable">$leftLength</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>) % <span class="hljs-number">8</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;blowIv;<br>         <br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$round</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$encryptedBlock</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$string</span>, <span class="hljs-number">8</span> * <span class="hljs-variable">$i</span>, <span class="hljs-number">8</span>);<br>            <span class="hljs-variable">$temp</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">decryptBlock</span>(<span class="hljs-variable">$encryptedBlock</span>), <span class="hljs-variable">$currentVector</span>);<br>            <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-variable">$currentVector</span>, <span class="hljs-variable">$encryptedBlock</span>);<br>            <span class="hljs-variable">$result</span> .= <span class="hljs-variable">$temp</span>;<br>        &#125;<br>         <br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$leftLength</span>) &#123;<br>            <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">encryptBlock</span>(<span class="hljs-variable">$currentVector</span>);<br>            <span class="hljs-variable">$result</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$string</span>, <span class="hljs-number">8</span> * <span class="hljs-variable">$i</span>, <span class="hljs-variable">$leftLength</span>), <span class="hljs-variable">$currentVector</span>);<br>        &#125;<br>         <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decryptTwelve</span>(<span class="hljs-params"><span class="hljs-variable">$upperString</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$upperString</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$string</span>, <span class="hljs-string">&#x27;AES-128-CBC&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="hljs-variable">$this</span>-&gt;aesIv);<br>    &#125;<br>&#125;;<br> <br> <br><span class="hljs-comment">//需要指定版本两种，11或12</span><br><span class="hljs-comment">//$navicatPassword = new NavicatPassword(11);</span><br><span class="hljs-comment">//这里我指定的12的版本，原先指定的11，执行之后的密码是乱码</span><br><span class="hljs-variable">$navicatPassword</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NavicatPassword</span>(<span class="hljs-number">12</span>);<br> <br><span class="hljs-comment">//解密</span><br><span class="hljs-comment">//$decode = $navicatPassword-&gt;decrypt(&#x27;15057D7BA390&#x27;);</span><br><span class="hljs-variable">$decode</span> = <span class="hljs-variable">$navicatPassword</span>-&gt;<span class="hljs-title function_ invoke__">decrypt</span>(<span class="hljs-string">&#x27;复制出来的密码&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$decode</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/23/post6/2022-05-23-21-33-45.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>navicat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac设置同时访问内外网</title>
    <link href="/2021/02/07/post5/"/>
    <url>/2021/02/07/post5/</url>
    
    <content type="html"><![CDATA[<p>在银行工作过程中，有时候我们需要使用网线连接电脑，连内网登录虚拟机访问虚拟桌面，外网用于日常使用。所以一般会将wifi设置成外网并优先访问，以太网设置为内网。但是当我第一次添加内网时，ping成功了，但是只能讲外网关掉才能访问，不能同时访问，此时我们需要要清除所有网络配置，重新设置一下就好。<br>具体操作：<br>1.打开终端<br>2.输入以下指令<br>netstat -rn –查看路由表<br>route get 0.0.0.0 –获取默认路由<br>sudo route delete 0.0.0.0 –删除默认路由<br>sudo route add -net 0.0.0.0 x.x.x.x –添加外网网关<br>sudo route add -net y.y.y.y x.x.x.x –添加内网网关（注意这里ip地址是自己要访问内网的ip地址，如果只访问某一台，可以将y.y.y.y改成固定的IP）<br>3.去网络设置里面设置服务顺序，这里设置外网wifi优先（选中拖动即可）</p>]]></content>
    
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DevUtils.app Xcode编译</title>
    <link href="/2021/01/30/post4/"/>
    <url>/2021/01/30/post4/</url>
    
    <content type="html"><![CDATA[<p>Developer Utilities for macOS<br><img src="/2021/01/30/post4/2022-05-23-13-10-53.png"><br>Format/Validate JSON, encode/decode Base64, convert timestamps, debug JWT… with just one click! Native macOS app, works offline, and open source.<br>这是一款付费开源的软件，他提供的编译版是收费的，自己编译就免费了。<br>于是自己编译吧。<br>附上地址:<a href="https://github.com/DevUtilsApp/DevUtils-app">https://github.com/DevUtilsApp/DevUtils-app</a><br>开发环境:<br>This source code is a delayed version of DevUtils.</p><h3 id="Development-environment"><a href="#Development-environment" class="headerlink" title="Development environment"></a>Development environment</h3><ul><li>Swift 5.1+</li><li>Xcode 11.1+</li><li>Swift Package Manager</li><li>Carthage</li></ul><h3 id="编译说明"><a href="#编译说明" class="headerlink" title="编译说明"></a>编译说明</h3><ul><li><p>克隆仓库到本地。</p></li><li><p>Bootstrap carthage, 这个是安装所需要的依赖:</p></li></ul><p><code>carthage bootstrap --platform macOS（不安装会报依赖找不到）</code></p><ul><li>在Xcode中将签名团队更新为您的个人或组织团队。 这是在本地构建应用程序所必需的。 如果您在代码签名方面遇到问题，还请查看以下文章以查看是否有帮助：<ul><li><a href="https://developer.apple.com/support/code-signing/">https://developer.apple.com/support/code-signing/</a></li><li><a href="https://help.apple.com/xcode/mac/current/#/dev60b6fbbc7">https://help.apple.com/xcode/mac/current/#/dev60b6fbbc7</a></li></ul></li><li>在Xcode中跑起来。</li></ul><h3 id="Bootstrap-carthage-安装："><a href="#Bootstrap-carthage-安装：" class="headerlink" title="Bootstrap carthage 安装："></a>Bootstrap carthage 安装：</h3><p>1.brew<br>安装carthage之前需要安装brew，进入官网(<a href="https://brew.sh/index_zh-cn.html">https://brew.sh/index_zh-cn.html</a>) 有详细的安装步骤。<br>获取 Homebrew<br>打开终端Terminal，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xshell">/usr/bin/ruby -e &quot;$(curl -fsSL &lt;https://raw.githubusercontent.com/Homebrew/install/master/install&gt;)&quot;<br></code></pre></td></tr></table></figure><p>获取最新版本<br><code>brew update</code><br>注意：如果遇到Error: The /usr/local directory is not writable.错误，就执行以下命令<code>sudo chown -R $(whoami):admin /usr/local</code>，再更新。</p><p>2.安装Carthage<br>安装brew之后，就可以安装Carthage了。<br><code>brew install carthage</code><br>安装Carthage之后，查看版本<br><code>carthage version   //目前的版本号为0.15.2</code><br>使用Carthage<br>进入项目所在文件夹<br><code>cd ~/路径/项目文件夹</code><br>创建一个空的carthage文件<br><code>touch Cartfile</code><br>此时项目文件夹中会有一个名字为Carthage的文件<br>使用Xcode打开该文件<br><code>open -a Xcode Cartfile</code><br>编辑Cartfile<br><code>github &quot;SVProgressHUD/SVProgressHUD&quot; ~&gt; 1.0</code><br>Cartfile格式说明<br>依赖源Dependency origin<br>Carthage支持两种类型的源，一个是github，另一个是git。<br>github 表示依赖源，告诉Carthage去哪里下载文件。依赖源之后跟上要下载的库，格式为Username/ProjectName<br>git 关键字后面跟的是资料库的地址，可以是远程的URL地址，使用git://, http://, ssh://，或者是本地资料库地址。<br>依赖版本号 Dependency Version<br>告诉Carthage使用哪个版本，这是可选的，不写默认使用最新版本</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">== 1.0 表示使用1.0版本</span><br>&gt;= 1.0 表示使用1.0或更高的版本<br>~&gt; 1.0 表示使用版本1.0以上但是低于2.0的最新版本，如1.2，1.6<br></code></pre></td></tr></table></figure><p>branch名称 / tag名称 / commit名称，意思是使用特定的分支/标签/提交，比如可以是分支名master，也可以是提交5c8a74a。<br>运行命令<br><code>carthage bootstrap --platform macOS</code><br>报了一个使用Carthage 错误 error: unable to find utility “xcodebuild”, not a developer tool or in PATH<br>google 了一下发现要:<br><img src="/2021/01/30/post4/2022-05-23-21-10-05.png"><br>打开xcode 运行发现：<br><img src="/2021/01/30/post4/2022-05-23-21-12-42.png"><br>报错了，好像是没有这个包，可能是我💻是m1 芯片的原因，于是我修改成Rosetta运行：<br><img src="/2021/01/30/post4/2022-05-23-21-13-04.png"><br>成功了。将app拖到Application就好了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于服务器上logback中文日志乱码？？？</title>
    <link href="/2020/07/23/post3/"/>
    <url>/2020/07/23/post3/</url>
    
    <content type="html"><![CDATA[<p>本地运行logback 输出日志不会乱码 服务器上中文就全变？？？？了<br><img src="/2020/07/23/post3/2022-05-23-13-06-21.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac恢复模式u盘拷文件到系统磁盘</title>
    <link href="/2019/10/18/post2/"/>
    <url>/2019/10/18/post2/</url>
    
    <content type="html"><![CDATA[<p>之前写的那篇clean my mac 卸载 teamviewer 导致系统不能开机了 。那么怎么将文件传进去呢？方法很多两台mac连着 然后传文件 因为这个线一般人都没有，所有pass 。<br>1、我是使用丢在服务器上，然后联网下载。注意文件的权限，http访问不到那个资源，curl会把403页面下下来了，改成了tar后缀。<br>2、网上的方法是使用 U 盘拷的，比如说需要的文件夹 TeamViewerAuthPlugin.bundle 就在 /Volumes/u盘名字/ 里面，我要拷到 /Volumes/Macintosh HD/Library/Security/SecurityAgentPlugins/ 路径下。如果提示 Macintosh HD 是 read-only，那就拷到 /Volumes/Macintosh HD - Data/Library/Security/SecurityAgentPlugins/ 路径下，没有文件夹的话就创建文件夹，这个路径是不用 sudo的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注意使用cmm卸载TeamViewer</title>
    <link href="/2019/10/15/post1/"/>
    <url>/2019/10/15/post1/</url>
    
    <content type="html"><![CDATA[<p>升级到 最新系统Catalina 后，卸载了TeamViewer ，重启电脑后，就开机不了了，恢复模式也不行。<br><img src="/2019/10/15/post1/2022-05-23-12-45-25.png"><br>升级到 最新系统Catalina 后，爆出tv有问题，就想卸了tv。用 cmm 卸载之后，由于要重启电脑，于是就近重启。结果重启后蹦出一个错误提示框<br>连登陆界面都不显示了，进安全模式也没有用，总之就是没法正常开机。后来进恢复模式，从朋友的 mac 上拷贝来 /Library/Security/SecurityAgentPlugins/TeamViewerAuthPlugin.bundle 才能够正常启动。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
